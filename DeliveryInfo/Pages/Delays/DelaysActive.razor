@page "/delaysactive"
@inject IHttpClientFactory _clientFactory
@inject ActivePageView View

<style>
    th {
        position: sticky;
        top: 0;
    }
</style>

@if (string.IsNullOrWhiteSpace(errorString) == false)
{
    <div class="h2">@errorString</div>
}
else if (delayssum is null)
{
    <div class="h4">Идет загрузка...</div>
}
else
{
<div class="row" style="position:sticky;top:0">
    <h3><b><i>Активные список</i></b></h3>
    <div></div>
       <table class="table table-striped" style="position:relative">
            <thead class="thead-dark" style="position:-webkit-sticky; position:sticky;top:0;background: white;">
                <tr>
                    <th scope="col">Ресторан</th>
                    <th scope="col">Значение оттяжки</th>
                    <th scope="col">Тип</th>
                    <th scope="col">Выставили</th>
                    <th scope="col">Причина</th>
                    <th scope="col">Полная причина</th>
                </tr>
            </thead>
            <tbody style="position:relative;overflow:auto; z-index:-99;">
                @if (alternames.Count > 0 || fullnames.Count > 0)
                {
                    alternames.Clear();
                    fullnames.Clear();
                }

                @foreach (var ds in delayssum)
                {
                    foreach (var rs in rlist)
                    {
                        if (ds.Zone == rs.name)
                        {
                            alternames.Add(rs.alter_name);
                            fullnames.Add(rs.ext_name);
                        }
                    }
                }
                @foreach (var d in delayssum)
                {
                    <tr>
                        <td class="table-dark">@fullnames.ElementAt(delayssum.IndexOf(d))</td>
                        <td align="center">@d.Delay</td>
                        <td>@d.Type</td>
                        <td>@d.SetTime</td>
                        <td>@d.Cause</td>
                        <td>@d.fullCause</td>
                    </tr>
                }
            </tbody>
        </table>
    
</div>
}

@code {
    List<DelaysModel> delayssum;
    
    string errorString;
    int n;
    [Parameter]
    public DateTime firstdate { get; set; }
    [Parameter]
    public DateTime lastdate { get; set; }
    [Parameter]
    public List<Rests> rlist { get; set; }

    List<string> alternames = new List<string>();
    List<string> fullnames = new List<string>();
    public List<string> restwithdelays = new List<string>();
    public List<Rests> restlist;

    //protected override async Task OnParametersSetAsync()
    //{
    //    await GetApiData();
    //}

    protected override async Task OnInitializedAsync()
    {
        //await GetApiData();
    }

    protected override async Task OnAfterRenderAsync(bool state)
    {
        await GetApiData();
        StateHasChanged();
    }

    protected async Task GetApiData()
    {
        //var request = new HttpRequestMessage(HttpMethod.Get,)
        var client = _clientFactory.CreateClient("StopsAPI");

        try
        {
            delayssum = await client.GetFromJsonAsync<List<DelaysModel>>("Delays");
            n = delayssum.Count - 1;
        }
        catch (Exception ex)
        {
            errorString = $"Произошла ошибка при попытке получить статистику по оттяжкам: {ex.Message}";
        }
    }

    protected async Task GetApiRestNames()
    {
        try
        {
            var client2 = _clientFactory.CreateClient("StopsAPI");

            restlist = await client2.GetFromJsonAsync<List<Rests>>("Rests");

            foreach (var r in restlist)
            {
                alternames.Add(r.alter_name);
                fullnames.Add(r.ext_name);
            }

        }
        catch (Exception ex)
        {
            errorString = $"Произошла ошибка при попытке получить информацию по заведениям: {ex.Message}";
        }
    }

    void DistinctRests()
    {
        restwithdelays.Clear();

        foreach (var delay in delayssum)
        {
            restwithdelays.Add(delay.Zone);
        }
        restwithdelays = restwithdelays.Distinct().ToList();
    }
}
