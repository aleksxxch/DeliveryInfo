@page "/delaysinfo"

@inject IHttpClientFactory _clientFactory
@inject Dates Dates
@inject Rests Rests
@inject TrafficState TS


<style>
    tr.hide-table-padding {
        padding: 0;
    }
    
    tr.hide-table-padding td {
            padding: 0;
    }

    .expand-button {
        position: relative;
    }

    tr.accordion-toggle {
        background-color: whitesmoke;
    }

    table.sectab tr.accordion-toggle{
        background-color:aquamarine;
    }

    tr.accordion-toggle.collapsed {
         background-color: white;
    }
    table.sectab tr.accordion-toggle.collapsed{
        background-color:aliceblue;
    }
        
    .accordion-toggle .expand-button:after {
        position: absolute;
        background-color: dodgerblue;
        left: .75rem;
        top: 50%;
        transform: translate(0, -50%);
        content: '-';
    }

    .accordion-toggle.collapsed .expand-button:after {
        content: '+';
        background-color: white;
    }

    tr.accordion-toggle.collapsed:hover {
        background-color: whitesmoke;
    }

    table.sectab tr.accordion-toggle.collapsed:hover {
        background-color:whitesmoke;
    }

    th {
        position: sticky;
        top: 0;
    }
</style>


@if (string.IsNullOrWhiteSpace(errorString) == false)
{
    <div class="h2">@errorString</div>
}
else if (delayssum is null)
{
    <div class="h4">Идет загрузка...</div>
}
else
{

    <div style="position:sticky;top:0">
        <h3><i><b>Статистика</b></i></h3>
        <table class="table" style="position:relative">
            <thead class="thead-dark" style="position:-webkit-sticky; position:sticky;top:0;background: white;z-index:9999999">
                <tr>
                    <th scope="col">Ресторан</th>
                    <th scope="col">Длительность (чч:мм)</th>
                    <th scope="col">Количество</th>
                    <th scope="col">Средняя длительность (чч:мм)</th>
                    <th scope="col">Среднее значение (м)</th>
                </tr>
            </thead>
            <tbody style="position:relative;overflow:auto;">
                @if (alternames.Count > 0 || fullnames.Count > 0)
                {
                    alternames.Clear();
                    fullnames.Clear();

                }

                @foreach (var ds in delayssum)
                {
                    foreach (var rs in rlist)
                    {
                        if (ds.restName == rs.name)
                        {
                            alternames.Add(rs.alter_name);
                            fullnames.Add(rs.ext_name);
                        }
                    }
                }
                @if (delayssum.Count > 0 && causessum.Count > 0)
                {
                    counter = 0;
                    @foreach (var d in delayssum)
                    {
                        <tr class="accordion-toggle collapsed" value="collapsed" id=@d.restName data-toggle="collapse" role="button" aria-expanded="false" href=@(String.Format("#{0}", alternames.ElementAt(counter))) aria-controls=@alternames.ElementAt(counter)>
                            <td class="table-dark">@(fullnames.ElementAt(counter))</td>
                            <td align="center" class="tablecell">
                                @ConvertToTimeString(Convert.ToInt64(d.durationSum))
                            </td>
                            <td align="center" class="tablecell">@d.numOfDelays</td>
                            <td align="center" class="tablecell">
                                @ConvertToTimeString(Convert.ToInt64(Math.Round(d.averageDuration)))
                            </td>
                            <td align="center" class="tablecell">@Math.Round(d.avgDelay)</td>
                        </tr>
                        <tr class="hide-table-padding">
                            <td colspan="5">
                                <div id=@alternames.ElementAt(counter) class="collapse col-md-12" style="padding:0;margin-bottom:5px;position:relative;overflow:auto;">
                                    <div id="@(alternames.ElementAt(counter)+"rt")">
                                        <table class="table sectab">
                                            @*<thead class="thead-light" style="padding:0">
                <tr style="visibility:hidden">
                    <th style='width: 290px'>Причина</th>
                    <th scope="col">Длительность (чч:мм)</th>
                    <th scope="col">Количество</th>
                    <th scope="col">Средняя длительность (чч:мм)</th>
                    <th scope="col">Среднее значение (м)</th>
                </tr>
            </thead>*@
                                            <tbody>
                                                @{sec_counter = 100;
                                                }
                                                @foreach (var c in causessum)
                                                {
                                                    @if (c.restName == d.restName)
                                                    {
                                                        <tr class="accordion-toggle collapsed" id=@(String.Format("{0}{1}", d.restName, c.cause)) role="button" data-toggle="collapse" aria-expanded="false" href=@(String.Format("#{0}{1}", alternames.ElementAt(counter), sec_counter.ToString())) aria-controls=@(String.Format("{0}{1}", alternames.ElementAt(counter), sec_counter.ToString())) style="z-index:9999;">
                                                            <td align="left" class="bg-secondary tablecell" style="color:aliceblue;width:279px">@c.cause</td>
                                                            <td align="center" class="tablecell">
                                                                @ConvertToTimeString(Convert.ToInt64(c.durationSum))
                                                            </td>
                                                            <td align="center" class="tablecell">@c.numOfDelays</td>
                                                            <td align="center" class="tablecell">
                                                                @ConvertToTimeString(Convert.ToInt64(Math.Round(c.averageDuration)))
                                                            </td>
                                                            <td align="center" style="width:320px">@Math.Round(c.avgDelay)</td>
                                                        </tr>
                                                        <tr>
                                                            <td colspan="5">
                                                                <div id=@(String.Format("{0}{1}", alternames.ElementAt(counter), sec_counter.ToString())) class="collapse col-md-12" style="padding:0;margin-bottom:5px;position:relative;overflow:auto; z-index:-99;">
                                                                    <table class="table thirdtable table-striped">
                                                                        <tbody>
                                                                            @foreach (var tr in timerangelist)
                                                                            {
                                                                                @if (tr.Zone == c.restName && tr.Cause == c.cause)
                                                                                {
                                                                            <tr>
                                                                                <td align="left" class="tablecell" style="width:379px">@tr.fullCause</td>
                                                                                <td align="center" class="tablecell">@ConvertToTimeString(Convert.ToInt64(tr.DiffTime))</td>
                                                                                <td align="center" class="tablecell" style="width:200px">@tr.SetTime</td>
                                                                                <td align="center" class="tablecell" style="width:200px">@tr.DelTime</td>
                                                                                <td align="center" class="tablecell">@tr.Delay</td>
                                                                            </tr>
                                                                                }
                                                                            }
                                                                        </tbody>
                                                                    </table>
                                                                </div>
                                                            </td>
                                                        </tr>
                                                        sec_counter++;
                                                    }
                                                }

                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </td>

                        </tr>
                        counter++;
                    }
                }

            </tbody>
        </table>

    </div>
}

@code {
    List<RestDelaysInfoModel> delayssum = new List<RestDelaysInfoModel>();
    List<RestDelaysInfoModelCauses> causessum = new List<RestDelaysInfoModelCauses>();
    List<DelaysModel> timerangelist = new List<DelaysModel>();

    int counter = 0;
    int sec_counter = 100;
    string errorString;


    [Parameter]
    public DateTime firstdate { get; set; }
    [Parameter]
    public DateTime lastdate { get; set; }
    [Parameter]
    public List<Rests> rlist { get; set; }
    List<string> alternames = new List<string>();
    List<string> fullnames = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        await GetApiData();
        await GetApiCauses();
        await GetDelaysTimeRange();
    }

    protected override async Task OnParametersSetAsync()
    {
        await GetApiData();
        await GetApiCauses();
        await GetDelaysTimeRange();
    }

    //Конвертирует количество минут полученных в результате в формат hh:mm
    string ConvertToTimeString(double minutes)
    {
        string result;

        if (Math.Floor(TimeSpan.FromMinutes(minutes).TotalHours) < 10 && TimeSpan.FromMinutes(minutes).Minutes >= 10)
        {
            result = string.Format("0{0}:{1}",
                Math.Floor(TimeSpan.FromMinutes(minutes).TotalHours),
                TimeSpan.FromMinutes(minutes).Minutes
                @*TimeSpan.FromMinutes(d.durationSum).Seconds*@);

        }
        else if (TimeSpan.FromMinutes(minutes).Minutes < 10 && Math.Floor(TimeSpan.FromMinutes(minutes).TotalHours) >= 10)
        {
result = string.Format("{0}:0{1}",
Math.Floor(TimeSpan.FromMinutes(minutes).TotalHours),
TimeSpan.FromMinutes(minutes).Minutes
@*TimeSpan.FromMinutes(d.durationSum).Seconds*@);

}
else if ((Math.Floor(TimeSpan.FromMinutes(minutes).TotalHours) < 10) && (TimeSpan.FromMinutes(minutes).Minutes < 10))
{
result = string.Format("0{0}:0{1}",
Math.Floor(TimeSpan.FromMinutes(minutes).TotalHours),
TimeSpan.FromMinutes(minutes).Minutes
@*TimeSpan.FromMinutes(d.durationSum).Seconds*@);

}
else @*((Math.Floor(TimeSpan.FromMinutes(minutes).TotalHours) >= 10) && (TimeSpan.FromMinutes(minutes).Minutes >= 10))*@
{
    result = string.Format("{0}:{1}",
        Math.Floor(TimeSpan.FromMinutes(minutes).TotalHours),
        TimeSpan.FromMinutes(minutes).Minutes
        @*TimeSpan.FromMinutes(d.durationSum).Seconds*@);

    }

    return result;
}

//получение массива величин сгруппированных по ресторанам
protected async Task GetApiData()
{
    try
    {
        var client = _clientFactory.CreateClient("StopsAPI");

        string f = firstdate.ToString();
        string l = lastdate.ToString();

        delayssum = await client.GetFromJsonAsync<List<RestDelaysInfoModel>>("delays/stats/sum?startdate=" + f + "&enddate=" + l);

    }
    catch (Exception ex)
    {
        errorString = $"Произошла ошибка при попытке получить статистику по оттяжкам: {ex.Message}";
    }
}

//получение массива величин сгруппированых по причинам и ресторанам
protected async Task GetApiCauses()
{
    try
    {
        var client3 = _clientFactory.CreateClient("StopsAPI");

        string f = firstdate.ToString();
        string l = lastdate.ToString();

        causessum = await client3.GetFromJsonAsync<List<RestDelaysInfoModelCauses>>("delays/stats/sum/causes?startdate=" + f + "&enddate=" + l + "&causeid=999");


    }
    catch (Exception ex)
    {
        errorString = $"Произошла ошибка при попытке получить статистику по оттяжкам: {ex.Message}";
    }
}

protected async Task GetDelaysTimeRange()
{
    try
    {
        var client4 = _clientFactory.CreateClient("StopsAPI");


        string f = firstdate.ToString();
        string l = lastdate.ToString();
        string apiString = "Delays/history?startdate="+f+"&enddate="+l;

        //timerangelist = await client4.GetFromJsonAsync<List<DelaysModel>>(String.Format("{0}{1}{2}{3}{4}","Delays/history?startdate=",f,"&enddate=",l,""));
        //timerangelist = await client4.GetFromJsonAsync<List<DelaysModel>>("Delays/history?startdate=2020-10-16 8:00:00&enddate=2020-10-27 7:59:59");
        timerangelist = await client4.GetFromJsonAsync<List<DelaysModel>>(apiString);
        
    }
    catch(Exception ex)
    {
        errorString = $"Произошла ошибка при попытке получить историю оттяжек: {ex.Message}";
    }
}

}
